package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MessageNewSequence) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.Sequencer = nil
	} else {
		if z.Sequencer == nil {
			z.Sequencer = new(Sequencer)
		}
		err = z.Sequencer.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageNewSequence) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	if z.Sequencer == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Sequencer.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageNewSequence) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	if z.Sequencer == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Sequencer.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageNewSequence) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Sequencer = nil
	} else {
		if z.Sequencer == nil {
			z.Sequencer = new(Sequencer)
		}
		bts, err = z.Sequencer.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageNewSequence) Msgsize() (s int) {
	s = 1
	if z.Sequencer == nil {
		s += msgp.NilSize
	} else {
		s += z.Sequencer.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageNewTx) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			return
		}
		z.Tx = nil
	} else {
		if z.Tx == nil {
			z.Tx = new(Tx)
		}
		err = z.Tx.DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageNewTx) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	if z.Tx == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Tx.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageNewTx) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	if z.Tx == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Tx.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageNewTx) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Tx = nil
	} else {
		if z.Tx == nil {
			z.Tx = new(Tx)
		}
		bts, err = z.Tx.UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageNewTx) Msgsize() (s int) {
	s = 1
	if z.Tx == nil {
		s += msgp.NilSize
	} else {
		s += z.Tx.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageSyncRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Hashes) >= int(zb0002) {
		z.Hashes = (z.Hashes)[:zb0002]
	} else {
		z.Hashes = make([]Hash, zb0002)
	}
	for za0001 := range z.Hashes {
		err = z.Hashes[za0001].DecodeMsg(dc)
		if err != nil {
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageSyncRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Hashes)))
	if err != nil {
		return
	}
	for za0001 := range z.Hashes {
		err = z.Hashes[za0001].EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageSyncRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Hashes)))
	for za0001 := range z.Hashes {
		o, err = z.Hashes[za0001].MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageSyncRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap(z.Hashes) >= int(zb0002) {
		z.Hashes = (z.Hashes)[:zb0002]
	} else {
		z.Hashes = make([]Hash, zb0002)
	}
	for za0001 := range z.Hashes {
		bts, err = z.Hashes[za0001].UnmarshalMsg(bts)
		if err != nil {
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageSyncRequest) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Hashes {
		s += z.Hashes[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageSyncResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Txs) >= int(zb0002) {
		z.Txs = (z.Txs)[:zb0002]
	} else {
		z.Txs = make([]*Tx, zb0002)
	}
	for za0001 := range z.Txs {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				return
			}
			z.Txs[za0001] = nil
		} else {
			if z.Txs[za0001] == nil {
				z.Txs[za0001] = new(Tx)
			}
			err = z.Txs[za0001].DecodeMsg(dc)
			if err != nil {
				return
			}
		}
	}
	var zb0003 uint32
	zb0003, err = dc.ReadArrayHeader()
	if err != nil {
		return
	}
	if cap(z.Sequencers) >= int(zb0003) {
		z.Sequencers = (z.Sequencers)[:zb0003]
	} else {
		z.Sequencers = make([]*Sequencer, zb0003)
	}
	for za0002 := range z.Sequencers {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				return
			}
			z.Sequencers[za0002] = nil
		} else {
			if z.Sequencers[za0002] == nil {
				z.Sequencers[za0002] = new(Sequencer)
			}
			err = z.Sequencers[za0002].DecodeMsg(dc)
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageSyncResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Txs)))
	if err != nil {
		return
	}
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Txs[za0001].EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.Sequencers)))
	if err != nil {
		return
	}
	for za0002 := range z.Sequencers {
		if z.Sequencers[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Sequencers[za0002].EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageSyncResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Txs)))
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Txs[za0001].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.Sequencers)))
	for za0002 := range z.Sequencers {
		if z.Sequencers[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Sequencers[za0002].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageSyncResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap(z.Txs) >= int(zb0002) {
		z.Txs = (z.Txs)[:zb0002]
	} else {
		z.Txs = make([]*Tx, zb0002)
	}
	for za0001 := range z.Txs {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.Txs[za0001] = nil
		} else {
			if z.Txs[za0001] == nil {
				z.Txs[za0001] = new(Tx)
			}
			bts, err = z.Txs[za0001].UnmarshalMsg(bts)
			if err != nil {
				return
			}
		}
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		return
	}
	if cap(z.Sequencers) >= int(zb0003) {
		z.Sequencers = (z.Sequencers)[:zb0003]
	} else {
		z.Sequencers = make([]*Sequencer, zb0003)
	}
	for za0002 := range z.Sequencers {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.Sequencers[za0002] = nil
		} else {
			if z.Sequencers[za0002] == nil {
				z.Sequencers[za0002] = new(Sequencer)
			}
			bts, err = z.Sequencers[za0002].UnmarshalMsg(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageSyncResponse) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Txs[za0001].Msgsize()
		}
	}
	s += msgp.ArrayHeaderSize
	for za0002 := range z.Sequencers {
		if z.Sequencers[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += z.Sequencers[za0002].Msgsize()
		}
	}
	return
}
